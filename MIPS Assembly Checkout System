# This is a program that simulates a checkout / rental system. Items can be checked out and the system
# will enforce that no device can be checked out twice, devices will be restocked when returned etc.

.data

ticket_ID:	.word	0,0,0,0,0,0,0	#Holds the transaction IDs for each robot that has been checked out
count:		.byte	0,0,0,0,0,0,0	#Keeps track of the number of times each robot has been checked out
		.space  1
available:	.byte	1,1,1,1,1,1,1   #Keeps track of whether or not a particular robot is available for check out.

Error1:		.asciiz "Error! No robots are available and the queue is currently full!"
Error2:		.asciiz "Error! Invalid transaction number entered!"
Error3:		.asciiz "Error! No robots are currently checked out!"
Prompt1:	.asciiz "Enter '1' to check out a robot or '-1' to quit. To return a robot, enter in the transaction ID.\n"
Prompt2:	.asciiz "No robots are currently available. You have been added to the queue"
Prompt3:	.asciiz "You have checked out the robot: "
Prompt4:	.asciiz "Your transaction ID is: "
Prompt5:	.asciiz "A robot has been returned."
Prompt6:	.asciiz "You have successfully returned a robot "
Prompt7:	.asciiz "This robot is currently Unavailable for checkout."
Prompt8:	.asciiz "This robot is currently Available for checkout."
Prompt9:	.asciiz "This robot has been checked out "
Prompt10:	.asciiz " times."
Prompt11:	.asciiz "This robot's transaction ID is: "
Prompt12:	.asciiz "Number of Rejections: "
Prompt13:	.asciiz "Current length of the queue: "
Robot1:		.asciiz "Alice"
Robot2:		.asciiz "Brian"
Robot3:		.asciiz "Chloe"
Robot4:		.asciiz "Dylan"
Robot5:		.asciiz "Elisa"
Robot6:		.asciiz "Frank"
Robot7:		.asciiz "Gerry"

#------------------------------------------------------------------------#
#----------------------Register Usage Information------------------------#
#------------------------------------------------------------------------#
# $t0 - Holds user input. Possibly transaction ID, 1 to check out or -1 to quit
# $t9 - Generic counter variable used in several functions
# $s0 - Return value register for CheckAvailability Function
# $s1 - Return value register for CheckQueue Function
# $s2 - Keeps track of the spot in the word array corresponding to the most recently checked out robot
# $s3 - Special variable used in ID registration
# $s4 - Keeps track of the spot in the byte arrays corresponding to the most recently checked out robot
# $s5 - Counts the number of people in the queue
# $s6 - Counts the number of rejections made by the system



#------------------------------------------------------------------------#
#-----------------------------Main Function------------------------------#
#------------------------------------------------------------------------#
.text
li $s3, 20	# Sets a starting value for the unique checkout IDs
li $s2, 0	# This starts at zero so when the address of the arrays are loaded, the first element is properly pointed to
li $s4, 0	# This starts at zero so when the address of the arrays are loaded, the first element is properly pointed to
li $s5, 0	# Start the number of people in the queue at zero.
li $s6, 0	# Start the number of rejections at zero

Main_Loop:

# "Enter '1' to check out a robot or '-1' to quit. To return a robot, enter in the transaction ID.\n"
li $v0, 4
la $a0, Prompt1
syscall
# Read in an integer and store the contents into $t0
li $v0, 5
syscall
move $t0, $v0

# If 1 is entered, the robot check-out procedure will start.
# If -1 is entered, the program will exit
# If something else is entered, the program will assume a robot is being 
# returned and will check to see if the input is a valid ID.
beq $t0, 1, get_robot
beq $t0, -1, quit_program
j return_robot

#------------------------------------------------------------------------#
#-------------------------Checking out a Robot---------------------------#
#------------------------------------------------------------------------#
get_robot:

jal CheckAvailability
beq $s0, 1, robot_is_available
beq $s0, 0, robot_not_available

robot_is_available:

jal GenerateID
j print_routine

robot_not_available:

addi $s5, $s5, 1		# Adds 1 to the number of people in the queue
jal CheckQueue
j print_routine



#------------------------------------------------------------------------#
#--------------------------Returning a Robot-----------------------------#
#------------------------------------------------------------------------#
return_robot:
jal CheckID
j print_routine
#------------------------------------------------------------------------#
#--------------------------Printing out Data-----------------------------#
#------------------------------------------------------------------------#
print_routine:
jal PrintData
j Main_Loop

#------------------------------------------------------------------------#
#-----------------------------Exit Program-------------------------------#
#------------------------------------------------------------------------#

quit_program:
li $v0, 10
syscall

#------------------------------------------------------------------------#
#----------------------------Other Functions-----------------------------#
#------------------------------------------------------------------------#

CheckAvailability:
#This function checks to see if any robots are ready to be checked out, and returns
# a 1 in $s0 if there are available robots and a 0 if there are none available
li $t9, 0
la $t1, available
CheckAvailabilityLoop:
lb $t2, ($t1)
beq $t2, 1, one_is_available
beq $t9, 6, none_available
addi $t9, $t9, 1
addi $t1, $t1, 1
j CheckAvailabilityLoop
one_is_available:
li $s0, 1
jr $ra
none_available:
li $s0, 0
jr $ra


#------------------------------------------------------------------------#
GenerateID:
# Sets the next robots availability to zero and generates a unique ID that is associated
# with the most recently checked out robot.
la $t3, available
li $t9, 0
GenerateIDLoop:

lb $t1, ($t3)
beq $t1, 1, found_opening
addi $t9, $t9, 1
addi $t3, $t3, 1
j GenerateIDLoop
found_opening:
mul $s2, $t9, 4

la $t1, ticket_ID
la $t2, count
la $t3, available
add $t1, $t1, $s2	# Modifies the pointer $t1 to point to the 'ticket_ID' element that corresponds to the first available robot
add $t2, $t2, $t9	# Modifies the pointer $t2 to point to the 'count' element that corresponds to the first available robot
add $t3, $t3, $t9	# Modifies the pointer $t3 to point to the 'available' element that corresponds to the first available robot
sw $s3, ($t1)		# Sends the ID stored in $s3 to the word corresponding with the checked out robot
li $t4, 0
sb $t4, ($t3)		# Replaces the byte in the available byte array that corresponds with the most recently checked out robot with a zero
lb $t4, ($t2)		# Gets the number of times the robot has been checked out
addi $t4, $t4, 1	# Increments the number of times the robot has been checked out
sb $t4, ($t2)		# Puts the incremented count back in the count byte array

li $v0, 11	# New Line
li $a0, 0x0A
syscall
# "Your transaction ID is: "
li $v0, 4
la $a0, Prompt4
syscall

li $v0, 1	
move $a0, $s3
syscall

addi $s3, $s3, 1	# Increments the ID generator by 1 so that all consecutive IDs are different
add $s2, $s2, 4		# Increments $s2 by 4 so that the next iteration will point to the next robot
add $s4, $s4, 1		# Increments $s2 by 1 so that the next iteration will point to the next robot

jr $ra


#------------------------------------------------------------------------#
CheckQueue:
# If no robots are available, this function will place the customer in a queue unless
# there are no spots in the queue. In that case an error message will be displayed.
# Returns a 1 in $s1 if the queue is empty, 0 if its occupied but not full, and
# 2 if it is full.
bgt $s5, 3, QueueFull
beq $s5, 0, QueueEmpty

# "No robots are currently available. You have been added to the queue"
li $s1, 0
li $v0, 4
la $a0, Prompt2
syscall
jr $ra

QueueFull:
# "Error! No robots are available and the queue is currently full!"
li $s1, 2
subi $s5, $s5, 1
li $v0, 4
la $a0, Error1
syscall
addi $s6, $s6, 1
jr $ra

QueueEmpty:
# "No robots are currently available. You have been added to the queue"
li $s1, 1
li $v0, 4
la $a0, Prompt2
syscall
jr $ra


#------------------------------------------------------------------------#
CheckID:
# When a user enters in an ID to return a robot, this function will check to see if the ID
# entered actually matches a valid ID. If it does, the robot will be marked available and will go to 
# the first person in the queue. If not, then an error message will be displayed.
li $t9, 0
la $t1, ticket_ID
CheckIDLoop:
lb $t2, ($t1)			# Loads first ID from ID array
beq $t2, $t0, is_valid_ID	# Checks to see if user input matches the loaded ID
beq $t9, 6, no_match
addi $t1, $t1, 4		# Increment pointer by 4
addi $t9, $t9, 1		# Incrememnt counter by 1
j CheckIDLoop

is_valid_ID:


la $t3, available		# Makes $t3 a pointer to the start of 'available'
li $t4, 1			
add $t3, $t3, $t9		# Adds the counter to the pointer so that it points to the corresponding spot in the 'available' array
sb $t4, ($t3)			# Changes the spot in the 'available' array to a 1
li $t4, 0
sb $t4, ($t1)			# Wipes the ID that was just returned from the 'ticket_ID' array
# "You have successfully returned the robot: "
li $v0, 4
la $a0, Prompt6
syscall

beq $s5, 0, queue_empty		# Now that the robot has been returned, we need to check and see if there is anyone in the queue
beq $s1, 0, queue_not_empty	# If there is anyone in the queue, we need to take them out of the queue, mark the robot unavailable again and generate a new transaction ID
beq $s1, 2, queue_not_empty

queue_empty:
jr $ra				# If the queue is empty, we will just return

queue_not_empty:
subi $s5, $s5, 1		# Decreases the number of people in the queue by 1
move $s7, $ra
jal GenerateID
move $ra, $s7
jr $ra

no_match:			# If there is no match, the ID entered was invalid. We will print a message and return.
# "Error! Invalid transaction number entered!"
li $v0, 4
la $a0, Error2
syscall

jr $ra


#------------------------------------------------------------------------#
PrintData:
# Prints out the status of each robot, the number of rejections, and the current state of the queue
la $t1, count
la $t2, available
la $t5, ticket_ID
li $t9, 0
li $t8, 0

PrintRobot1Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot1
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

beq $t4, 1, Robot1Ava
beq $t4, 0, Robot1Una

Robot1Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot2Info

Robot1Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall
li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot2Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot2
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

beq $t4, 1, Robot2Ava
beq $t4, 0, Robot2Una

Robot2Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot3Info

Robot2Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot3Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot3
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall


beq $t4, 1, Robot3Ava
beq $t4, 0, Robot3Una

Robot3Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot4Info

Robot3Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot4Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot4
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall


beq $t4, 1, Robot4Ava
beq $t4, 0, Robot4Una

Robot4Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot5Info

Robot4Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot5Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot5
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

beq $t4, 1, Robot5Ava
beq $t4, 0, Robot5Una

Robot5Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot6Info

Robot5Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot6Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot6
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

beq $t4, 1, Robot6Ava
beq $t4, 0, Robot6Una

Robot6Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j PrintRobot7Info

Robot6Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

PrintRobot7Info:
li $v0, 11	# New Line
li $a0, 0x0A
syscall

li $v0, 4
la $a0, Robot7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

lb $t3, ($t1)		# Loads in the 'count' entry for the robot
lb $t4, ($t2)		# Checks the robots availability
lb $t6, ($t5)		# Loads the robots ticket ID if it has one.
addi $t1, $t1, 1	# Increments 'count' pointer
addi $t2, $t2, 1	# Increments 'available' pointer
addi $t5, $t5, 4	# Increments 'ticket_ID' pointer

# "Has been checked out "
li $v0, 4
la $a0, Prompt9
syscall

li $v0, 1
move $a0, $t3
syscall

# " times."
li $v0, 4
la $a0, Prompt10
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

beq $t4, 1, Robot7Ava
beq $t4, 0, Robot7Una

Robot7Ava:
# "Is currently Available for checkout."
li $v0, 4
la $a0, Prompt8
syscall
j DonePrint

Robot7Una:
# "Is currently Unavailable for checkout."
li $v0, 4
la $a0, Prompt7
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall

# "This robots transaction ID is: "
li $v0, 4
la $a0, Prompt11
syscall
li $v0, 1
move $a0, $t6
syscall

DonePrint:
li $v0, 11	# New Line
li $a0, 0x0A
syscall
li $v0, 4
la $a0, Prompt12
syscall
li $v0, 1	
move $a0, $s6
syscall

li $v0, 11	# New Line
li $a0, 0x0A
syscall
li $v0, 4
la $a0, Prompt13
syscall
li $v0, 1	
move $a0, $s5
syscall
li $v0, 11	# New Line
li $a0, 0x0A
syscall
li $v0, 11	# New Line
li $a0, 0x0A
syscall

jr $ra


#------------------------------------------------------------------------#
#----------------------------Error Functions-----------------------------#
#------------------------------------------------------------------------#

Error_1:

Error_2:

Error_3:






